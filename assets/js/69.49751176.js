(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{212:function(e,t,a){"use strict";a.r(t);var o=a(0),s=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"vuex-conventions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex-conventions","aria-hidden":"true"}},[e._v("#")]),e._v(" Vuex conventions")]),e._v(" "),a("h2",{attrs:{id:"module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module","aria-hidden":"true"}},[e._v("#")]),e._v(" Module")]),e._v(" "),a("p",[e._v("Vuex module should be created for specific set of functionalities. Should also have only absolutely necessary dependencies to other modules.\nName of module should be short, quite clear about it’s destination and has words separated by dash.")]),e._v(" "),a("p",[e._v("Good examples:")]),e._v(" "),a("ul",[a("li",[e._v("products")]),e._v(" "),a("li",[e._v("product")]),e._v(" "),a("li",[e._v("user")]),e._v(" "),a("li",[e._v("checkout")]),e._v(" "),a("li",[e._v("compare-products")]),e._v(" "),a("li",[e._v("notifications")]),e._v(" "),a("li",[e._v("order")])]),e._v(" "),a("p",[e._v("Bad examples:")]),e._v(" "),a("ul",[a("li",[e._v("next-module")]),e._v(" "),a("li",[e._v("compare (because it’s not saying what its compare)")])]),e._v(" "),a("h2",{attrs:{id:"state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state","aria-hidden":"true"}},[e._v("#")]),e._v(" State")]),e._v(" "),a("p",[e._v("State properties should be simple and their structure should not be nested.  Their names are written in underscore case notation and indicates what they are containing.\nWe should avoid to have more than one instance of object, even between modules. In the vast majority of cases they can be referenced by it’s unique id property. Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "products_map": {\n    "WS08": {\n      "sku": "WS08",\n      "name": "Minerva LumaTech&trade; V-Tee"\n      // other options\n    },\n    "WS12": {\n      "sku": "WS12",\n      "name": "Radiant Tee"\n      // other options\n    },\n    "WS08-XS-Black": {\n        "sku": "WS08-XS-Black",\n        "name": "Minerva LumaTech&trade; V-Tee"\n        // other options\n    }\n    // maaaaaaaany more products\n  },\n  "current_product_id": "WS08-XS-Black",\n  "wishlist": ["MP01-32-Black", "MSH05-32-Black"],\n  "cart_items": [\n    {\n      "sku": "WH09-XS-Green",\n      "qty": 3\n    },\n    {\n      "sku": "WH09-S-Red",\n      "qty": 1\n    }\n  ]\n}\n')])])]),a("p",[e._v("Good examples:")]),e._v(" "),a("ul",[a("li",[e._v("categories_map")]),e._v(" "),a("li",[e._v("current_category_id")]),e._v(" "),a("li",[e._v("order")]),e._v(" "),a("li",[e._v("product_parent_id")])]),e._v(" "),a("p",[e._v("Bad examples")]),e._v(" "),a("ul",[a("li",[e._v("list")]),e._v(" "),a("li",[e._v("elements")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("filters: {\n  available: {},\n  chosen: {}\n},\n")])])]),a("h2",{attrs:{id:"getters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getters","aria-hidden":"true"}},[e._v("#")]),e._v(" Getters")]),e._v(" "),a("p",[e._v("Vuex state, except of mutations, should always be accessed by getters. Including actions.\nGetter should:")]),e._v(" "),a("ul",[a("li",[e._v("start from "),a("code",[e._v("is")]),e._v(" when returns Boolean, or "),a("code",[e._v("get")]),e._v(" otherwise")]),e._v(" "),a("li",[e._v("answer to question "),a("code",[e._v("what am I returning?")])]),e._v(" "),a("li",[e._v("contain module name to ensure that getter is unique through whole vuex. But I doesn’t have to start with that name - first of all it should have natural name.\nSo for example we have module "),a("code",[e._v("category")]),e._v(" and in state "),a("code",[e._v("availableFilters")]),e._v(". So "),a("code",[e._v("what am I returning?")]),e._v(" -> "),a("code",[e._v("available Filters")]),e._v(". And this filters are "),a("code",[e._v("category filters")]),e._v(" . Its not a Boolean, it’s array or map so we’re starting with "),a("code",[e._v("get")]),e._v(" -> "),a("code",[e._v("getAvailableCategoryFilters")])])]),e._v(" "),a("p",[e._v("Good examples:")]),e._v(" "),a("ul",[a("li",[e._v("for state user -> isUserLoggedIn, getUser")]),e._v(" "),a("li",[e._v("for state availableFilters -> getAvailableCategoryFilters")]),e._v(" "),a("li",[e._v("for state currentProductId -> getCurrentProduct (because it gets product object from map), getCurrentProductId")])]),e._v(" "),a("p",[e._v("Bad examples:")]),e._v(" "),a("ul",[a("li",[e._v("totals")]),e._v(" "),a("li",[e._v("product")]),e._v(" "),a("li",[e._v("current")]),e._v(" "),a("li",[e._v("list")])]),e._v(" "),a("h2",{attrs:{id:"actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actions","aria-hidden":"true"}},[e._v("#")]),e._v(" Actions")]),e._v(" "),a("p",[e._v("It’s a heart of logic for module. Every state change from outside of module should be invoked as an action. Actions are meant to:")]),e._v(" "),a("ul",[a("li",[e._v("fetch something from server(or cache) - in this case they have to be asynchronous (return promise)")]),e._v(" "),a("li",[e._v("mutate state of current module")]),e._v(" "),a("li",[e._v("dispatch actions from same module (to avoid repeating logic)")]),e._v(" "),a("li",[e._v("dispatch actions from another modules (only if it’s absolutely required)")])]),e._v(" "),a("p",[e._v("Their names should most possibly be unique and in simple way says what specific action is doing. "),a("strong",[e._v("Almost every action should return promise")]),e._v(".\nWe allow to replicate convention for existing methods like "),a("code",[e._v("list")]),e._v(" or "),a("code",[e._v("single")]),e._v(" in new modules to have consistient api.")]),e._v(" "),a("p",[e._v("Good examples:")]),e._v(" "),a("ul",[a("li",[e._v("fetchProduct - gets product by id from server or cache, sets it in products map and returns it by getter")]),e._v(" "),a("li",[e._v("findProducts - fetches products by specific query, sets them in products map and returns them as array")]),e._v(" "),a("li",[e._v("setCurrentProduct - param could be id, it could dispatch "),a("code",[e._v("fetchProduct")]),e._v(", mutate it to productsMap and mutate its id to currentProductId. Also if productId is null then it removes currentProduct.")]),e._v(" "),a("li",[e._v("addCartItem")]),e._v(" "),a("li",[e._v("toggleMicrocart")])]),e._v(" "),a("p",[e._v("Bad examples:")]),e._v(" "),a("ul",[a("li",[e._v("products")]),e._v(" "),a("li",[e._v("reset")])]),e._v(" "),a("h2",{attrs:{id:"mutations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutations","aria-hidden":"true"}},[e._v("#")]),e._v(" Mutations")]),e._v(" "),a("p",[e._v("Finally we have mutations. Only mutations can change state of module. They should be synchronous (never returns promise), not contain any logic (be extremely fast) except one needed to keep state as it should be (for example sets default value for state). Mutations should be invoked only by actions from the same module. In most cases it should be only a single action which invokes specific mutation.\nTypes of mutation:")]),e._v(" "),a("ul",[a("li",[e._v("SET_ - it’s the most common type of mutation. It can set an object (or whole array), set default value of object (or maybe clean array),")]),e._v(" "),a("li",[e._v("ADD_ - it can add new element to state property which is an array or add new element to Map")]),e._v(" "),a("li",[e._v("REMOVE_ - an opposite to ADD. It can remove map element or array element by index (or by finding object which is not recommended way on big arrays, then mutation could be slow)")])]),e._v(" "),a("p",[e._v("Good examples:")]),e._v(" "),a("ul",[a("li",[e._v("ADD_PRODUCT")]),e._v(" "),a("li",[e._v("SET_CURRENT_PRODUCT_ID")]),e._v(" "),a("li",[e._v("ADD_CATEGORY_FILTER")]),e._v(" "),a("li",[e._v("REMOVE_WISHLIST_PRODUCT_ID")])]),e._v(" "),a("p",[e._v("Bad examples:")]),e._v(" "),a("ul",[a("li",[e._v("CATEGORY_UPD_CURRENT_CATEGORY")]),e._v(" "),a("li",[e._v("TAX_UPDATE_RULES")])])])}],!1,null,null,null);s.options.__file="vuex-conventions.md";t.default=s.exports}}]);